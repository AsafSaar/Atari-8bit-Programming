# Sample linker configuration for C programs using the Atari binary file support.
# Use with: cl65 -tatari -Catari-c-xex.cfg prog.c -o prog.xex
FEATURES {
    STARTADDRESS: default = $2000;
}
SYMBOLS {
    __SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
    __SYSCHKHDR__:       type = export, value = 0; # Disable system check header
    __SYSCHKTRL__:       type = export, value = 0; # Disable system check trailer
}
MEMORY {
    ZP:         file = "", define = yes, start = $0082, size = $007E;
# "system check" load chunk
    SYSCHKCHNK: file = %O,               start = $2E00, size = $0300;
# "main program" load chunk
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;

    CROWNLANDCHARSET_MEM: file = %O,               start = $6000, size = $0400;
    
    CROWNLANDCHARSET2_MEM: file = %O,               start = $7000, size = $0400;
    
    CROWNLANDDLIST_MEM: file = %O,               start = $5000, size = $0021;

    CROWNLANDSCREEN_MEM: file = %O,               start = $5400, size = $0400;

    CROWNLANDSCR1_MEM: file = %O,               start = $BC00, size = $0018;

    CROWNLANDSCR2_MEM: file = %O,               start = $BD40, size = $0018;

    CROWNLANDSCR3_MEM: file = %O,               start = $BE00, size = $001A;
}
FILES {
    %O: format = atari;
}
FORMATS {
    atari: runad = start,
           initad = SYSCHKCHNK: __SYSTEM_CHECK__;
}
SEGMENTS {
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    SYSCHK:    load = SYSCHKCHNK, type = rw,  define = yes, optional = yes;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    LOWBSS:    load = MAIN,       type = rw,                optional = yes;  # not zero initialized
    LOWCODE:   load = MAIN,       type = ro,  define = yes, optional = yes;
    ONCE:      load = MAIN,       type = ro,                optional = yes;
    CODE:      load = MAIN,       type = ro,  define = yes;
    RODATA:    load = MAIN,       type = ro;
    DATA:      load = MAIN,       type = rw;
    INIT:      load = MAIN,       type = rw,                optional = yes;
    BSS:       load = MAIN,       type = bss, define = yes;

    CROWNLANDCHARSET:       load = CROWNLANDCHARSET_MEM,       type = rw, define = yes;

    CROWNLANDCHARSET2:       load = CROWNLANDCHARSET2_MEM,       type = rw, define = yes;

    CROWNLANDDLIST:       load = CROWNLANDDLIST_MEM,      type = rw, define = yes;

    CROWNLANDSCREEN:       load = CROWNLANDSCREEN_MEM,      type = rw, define = yes;

    CROWNLANDSCR1:       load = CROWNLANDSCR1_MEM,       type = rw, define = yes;

    CROWNLANDSCR2:       load = CROWNLANDSCR2_MEM,       type = rw, define = yes;

    CROWNLANDSCR3:       load = CROWNLANDSCR3_MEM,       type = rw, define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
